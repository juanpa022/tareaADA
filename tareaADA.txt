#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Definición de una arista
struct Edge {
    int src, dest, weight;
};

// Comparador para ordenar las aristas por peso
bool compareEdges(const Edge &a, const Edge &b) {
    return a.weight < b.weight;
}

// Encuentra el conjunto al que pertenece un elemento
int find(vector<int> &parent, int i) {
    if (parent[i] != i) {
        parent[i] = find(parent, parent[i]);
    }
    return parent[i];
}

// Une dos subconjuntos en uno solo
void unionSets(vector<int> &parent, vector<int> &rank, int x, int y) {
    int rootX = find(parent, x);
    int rootY = find(parent, y);

    if (rank[rootX] < rank[rootY]) {
        parent[rootX] = rootY;
    } else if (rank[rootX] > rank[rootY]) {
        parent[rootY] = rootX;
    } else {
        parent[rootY] = rootX;
        rank[rootX]++;
    }
}

// Algoritmo de Kruskal para encontrar el AEM
vector<Edge> kruskal(vector<Edge> &edges, int V) {
    sort(edges.begin(), edges.end(), compareEdges);

    vector<int> parent(V);
    vector<int> rank(V, 0);

    for (int i = 0; i < V; ++i) {
        parent[i] = i;
    }

    vector<Edge> result;
    for (const auto &edge : edges) {
        int x = find(parent, edge.src);
        int y = find(parent, edge.dest);

        if (x != y) {
            result.push_back(edge);
            unionSets(parent, rank, x, y);
        }
    }

    return result;
}

int main() {
    int V = 4; // Número de vértices
    vector<Edge> edges = {
        {0, 1, 1}, {0, 2, 4}, {1, 2, 2}, {1, 3, 5}, {2, 3, 3}
    };

    vector<Edge> mst = kruskal(edges, V);

    cout << "Aristas en el árbol de expansión mínimo (Kruskal):\n";
    for (const auto &edge : mst) {
        cout << edge.src << " -- " << edge.dest << " == " << edge.weight << "\n";
    }

    return 0;
}
